import {createSlice } from '@reduxjs/toolkit';

const initialState = {
  register:false,
  signin:false,
  sellersignin:false,
  loggedInUser:"",
  showAddProduct:false,
  products:[],
  sellerProducts:[],
  showEdit:false,
  searchResults:[],
  searchContent:""
};

export const commonSlice = createSlice({
  name: 'common',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleRegisterPage: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.register = !state.register
    },
    toggleSignInPage: (state) => {
      state.signin = !state.signin
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    toggleSellerSignInPage: (state) => {
      state.sellersignin = !state.sellersignin
    },
    setLoggedInUser: (state,action) => {
      state.loggedInUser = action.payload
    },
    toggleAddProductPage: (state) => {
      state.showAddProduct = !state.showAddProduct
    },
    setProducts: (state,action) => {
      state.products = action.payload;
      
    },
    setSellerProducts: (state,action) => {
      state.sellerProducts = action.payload;
      
    },
    toggleEditPage:(state)=>{
      state.showEdit = !state.showEdit;
    },
    setSearchResults: (state,action) => {
      state.searchResults = action.payload;
      
    },
    setSearchContent: (state,action) => {
      
      state.searchContent = action.payload;
      
    },


  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { toggleRegisterPage,
               toggleSignInPage,
               toggleSellerSignInPage,
               setLoggedInUser,
               toggleAddProductPage,
               setProducts,
               setSellerProducts,
               toggleEditPage,
               setSearchResults,
               setSearchContent
} = commonSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectValue = (state) => state.common;

export default commonSlice.reducer;
